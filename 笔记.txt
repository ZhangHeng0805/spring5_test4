AOP(概念)
    1、什么是AOP
        （1）面向切面（方面）编程，利用AOP可以对业务逻辑的各个部分进行隔离，
        从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。
        （2）通俗描述：不通过修改源代码方式，在主干功能里面添加新功能
AOP（底层原理）
    1、AOP底层使用动态代理
        （1）有两种情况动态代理
            第一种 有接口，使用JDK动态代理
                创建接口实现类代理对象，增强类的方法
            第二种 没有接口，使用CGLIB动态代理
                创建子类的代理对象，增强类的方法
AOP（JDK动态代理）
    1、使用JDK动态代理，使用Proxy类里面的方法创建代理对象
        （1）调用newProxyInstance方法
            方法里面有三个参数：
                第一参数，类加载器
                第二参数，增强方法所在的类，这个类实现的接口，支持多个接口
                第三参数，实现这个接口InvocationHandler，创建代理对象，写增强的方法
    2、编写JDK动态代理的代码
        （1）创建接口，定义方法
            public interface UserDao {
                public int add(int a,int b);
                public String update(String id);
            }
        （2）创建接口实现类，实现方法
            public class UserDaoImpl implements UserDao {
                @Override
                public int add(int a, int b) {
                    return a+b;
                }
                @Override
                public String update(String id) {
                    return id;
                }
            }
        （3）使用Proxy类创建接口代理对象
            public class JDKProxy {
                public static void main(String[] args) {
                    //创建接口实现类代理对象
                    Class[] interfaces={
                            UserDao.class
                    };
            //        Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces, new InvocationHandler() {
            //            @Override
            //            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
            //                return null;
            //            }
            //        });
                    UserDaoImpl userDao=new UserDaoImpl();
                    UserDao dao= (UserDao) Proxy.newProxyInstance(JDKProxy.class.getClassLoader(), interfaces,new UserDaoProxy(userDao));
                    int add=dao.add(1,2);
                    System.out.println("result；"+add);
                }
            }

            //创建代理对象代码
            class UserDaoProxy implements InvocationHandler{
                /*
                * 1.把创建的谁的代理对象，把谁传递过来
                * 有参数的构造传递
                * */
                private Object object;
                public UserDaoProxy(Object obj) {
                    this.object=obj;
                }
                //增强的逻辑
                @Override
                public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                    //方法之前
                    System.out.println("方法之前执行......"+method.getName()+":传递的参数......"+ Arrays.toString(args));
                    //被增强的方法执行
                    Object res=method.invoke(object,args);
                    //方法之后
                    System.out.println("方法之后执行......"+object);
                    return res;
                }
            }

AOP（术语）
    1、连接点
        类里面的哪些方法可以被增强，这些方法称为连接点
    2、切入点
       实际被增强的方法，称为切入点
    3、通知（增强）
        （1）实际增强的逻辑部分称为通知（增强）
        （2）通知有多种类型
            *前置通知
            *后置通知
            *环绕通知
            *异常通知
            *最终通知
    4、切面
        是动作
            （1）把通知应用到切入点的过程

AOP操作（准备）
    1、Spring框架一般都只基于AspectJ实现AOP操作
        （1）什么是AspectJ
            *AspectJ不是Spring组成部分，是一个独立的AOP框架，一般把AspectJ和Spring框架一起使用，进行AOP操作
    2、基于AspectJ实现AOP操作
        （1）基于xml配置文件实现
        （2）基于注解方式实现（一般使用）
    3、在项目里面引入AOP相关依赖
        com.springsource.org.aspectjweaver-1.6.8.jar
        com.springsource.net.sf.cglib-sources-2.2.0.jar
        com.springsource.org.aopalliance-1.0.0.jar
    4、切入点表达式
        （1）切入点表达式作用：知道对哪个类里面的哪个方法进行增强
        （2）语法结构：
            execution([权限修饰符][返回类型][类全路径][方法名称]([参数列表]))
            举例1：对com.zh.dao.BookDao类里面的add进行增强
                execution(* com.zh.dao.BookDao.add(..))
            举例2：对com.zh.dao.BookDao类里面的所有方法进行增强
                execution(* com.zh.dao.BookDao.*(..))
            举例2：对com.zh.dao包里面所有类，类里面的所有方法进行增强
                execution(* com.zh.dao.*.*(..))
AOP操作（AspectJ注解）
    1、创建类，在类里面定义方法
        public class User {
            public void add(){
                System.out.println("add.........");
            }
        }
    2、创建增强类（编写增强逻辑）
        （1）在增强类里面，创建方法，让不同方法代表不同通知类型
        public class UserProxy {
            //前置通知
            public void before(){
                System.out.println("before........");
            }
        }
    3、进行通知的配置
        （1）在spring配置文件中，开启注解扫描
            <beans xmlns="http://www.springframework.org/schema/beans"
                   xmlns:context="http://www.springframework.org/schema/context"
                   xmlns:aop="http://www.springframework.org/schema/aop"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
                <!--开启注解扫描-->
                <context:component-scan base-package="zh.spring5.aopanno"></context:component-scan>
            </beans>
        （2）使用注解创建User和UserProxy对象
            @Component
            public class User

            @Component
            public class UserProxy
        （3）在增强类上面添加注解@Aspect
            @Component
            @Aspect //生成代理对象
            public class UserProxy
        （4）在spring配置文件中开启生成代理对象
            <!--开启Aspect生成代理对象-->
            <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
    4、配置不同类型的通知
        （1）在增强类里面，在作为通知方法上面添加通知类型的注解，使用切入点表达式配置
            /*
            * 增强的类
            * */
            @Component
            @Aspect //生成代理对象
            public class UserProxy {
                //前置通知
                //@Before注解表示作为前置通知
                @Before(value = "execution(* zh.spring5.aopanno.User.add(..))")
                public void before(){
                    System.out.println("before........");
                }
                //最终通知
                @After(value = "execution(* zh.spring5.aopanno.User.add(..))")
                public void after(){
                    System.out.println("after..........");
                }
                //异常通知
                @AfterThrowing(value = "execution(* zh.spring5.aopanno.User.add(..))")
                public void afterThrowing(){
                    System.out.println("afterThrowing..........");
                }
                //后置通知（返回通知）
                @AfterReturning(value = "execution(* zh.spring5.aopanno.User.add(..))")
                public void afterReturning(){
                    System.out.println("afterReturning..........");
                }
                //环绕通知
                @Around(value = "execution(* zh.spring5.aopanno.User.add(..))")
                public void around(ProceedingJoinPoint proceedingJoinPoint) throws Throwable{
                    System.out.println("环绕之前..........");
                    //被增强方法执行
                    proceedingJoinPoint.proceed();
                    System.out.println("环绕之后..........");
                }
            }
    5、相同切入点抽取
            //相同切入点抽取
            @Pointcut(value = "execution(* zh.spring5.aopanno.User.add(..))")
            public void pointdemo(){
            }
            //前置通知
            //@Before注解表示作为前置通知
            @Before(value = "pointdemo()")
            public void before(){
                System.out.println("before........");
            }
    6、有多个增强类对同一个方法进行增强，设置增强类的优先级
        （1）在增强类上面添加注解@Order(数字类型)，值越小优，先级越高
                @Component
                @Aspect
                @Order(1)
                public class PersonProxy {
                    //最终通知
                    @Before(value = "execution(* zh.spring5.aopanno.User.add(..))")
                    public void before(){
                        System.out.println("Person Before..........");
                    }
                }
    7、完全使用注解开发
        （1）创建配置类，不需要创建xml配置文件
            @Configuration
            @ComponentScan(basePackages = {"zh.spring5"})   //开启注解扫描
            @EnableAspectJAutoProxy(proxyTargetClass = true)    //开启Aspect生成代理对象
            public class Config {
            }
AOP操作（AspectJ配置文件）
    1、创建两个类，增强类和被增强类，创建方法
    2、在spring配置文件中创建两个对象
    3、在spring配置文件中配置切入点
        <!--创建对象-->
            <bean id="book" class="zh.spring5.aopxml.Book"></bean>
            <bean id="bookProxy" class="zh.spring5.aopxml.BookProxy"></bean>
            <!--配置AOP增强-->
            <aop:config>
                <!--配置切入点-->
                <aop:pointcut id="p" expression="execution(* zh.spring5.aopxml.Book.buy(..))"/>
                <!--配置切面-->
                <aop:aspect ref="bookProxy">
                    <!--配置增强作用在具体的方法上-->
                    <aop:before method="before" pointcut-ref="p"/>
                </aop:aspect>
            </aop:config>


